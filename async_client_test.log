2021-08-25 16:17:02,432:DEBUG:Using selector: EpollSelector
2021-08-25 16:17:02,441:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:17:03,774:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "2b3417fc-573c-469a-9b7a-1f90adb3b9d5", 
  "success": 1
}

2021-08-25 16:17:03,774:INFO:POST 'get_devices' data = ({'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5'})
2021-08-25 16:17:04,135:INFO:response for 'get_devices' data = ({'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:17:04,136:INFO:POST 'set_cards' data = ({'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:17:04,137:INFO:POST 'set_cards' data = ({'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:17:04,138:INFO:POST 'set_cards' data = ({'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:17:04,797:INFO:response for 'set_cards' data = ({'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:17:04,916:INFO:response for 'set_cards' data = ({'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:17:05,111:ERROR:FAILED
2021-08-25 16:17:05,111:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:17:05,111:ERROR:status: 500
2021-08-25 16:17:05,112:ERROR:sent params: {'sid': '2b3417fc-573c-469a-9b7a-1f90adb3b9d5', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:17:05,112:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139886080048720,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5pTa3PLqlmbXiCfR0PFw";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-139886080048464">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-139886080048784">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139886080048656">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-139886080049040">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139886080048976">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-139886080049104">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-139886080045264">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-139886080047952">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139886080048592">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-139886080048528">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-139886079991440">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">123</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>obj = json_objects.get('result')</pre>
<pre class="line before"><span class="ws">        </span>print(&quot;OBJECT ADDCARDS : &quot;,obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line current"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line after"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre></div>
</div>

<li><div class="frame" id="frame-139886079990480">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.get ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws">        </span>json_objects=json.loads ( str ( rs.text ) )</pre>
<pre class="line after"><span class="ws">        </span>#print ( str ( method ) + '  &lt;  Response   &gt;  ' + str ( params ) )</pre>
<pre class="line after"><span class="ws">        </span>#print(json_objects)</pre>
<pre class="line after"><span class="ws">        </span>if method == 'RecordUpdater.insert':</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139886079988624">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">75</em>,
      in <code class="function">get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('get', url, params=params, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def options(url, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends an OPTIONS request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139886079990224">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139886079988432">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-139886079991184">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139886079990992">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 123, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 75, in get
    return request('get', url, params=params, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 123, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { "name" :"AccessControlCard" }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 75, in get
    return request('get', url, params=params, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:17:05,113:ERROR:test exception: set_cards FAILED
2021-08-25 16:22:43,898:DEBUG:Using selector: EpollSelector
2021-08-25 16:22:43,907:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:22:44,189:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "d87c541d-d5c9-40a3-a52f-07fd1464c415", 
  "success": 1
}

2021-08-25 16:22:44,189:INFO:POST 'get_devices' data = ({'sid': 'd87c541d-d5c9-40a3-a52f-07fd1464c415'})
2021-08-25 16:22:44,600:INFO:response for 'get_devices' data = ({'sid': 'd87c541d-d5c9-40a3-a52f-07fd1464c415'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:22:44,600:INFO:POST 'set_cards' data = ({'sid': 'd87c541d-d5c9-40a3-a52f-07fd1464c415', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:22:44,601:INFO:POST 'set_cards' data = ({'sid': 'd87c541d-d5c9-40a3-a52f-07fd1464c415', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:22:44,602:INFO:POST 'set_cards' data = ({'sid': 'd87c541d-d5c9-40a3-a52f-07fd1464c415', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:22:45,291:ERROR:FAILED
2021-08-25 16:22:45,291:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:22:45,291:ERROR:status: 500
2021-08-25 16:22:45,292:ERROR:sent params: {'sid': 'd87c541d-d5c9-40a3-a52f-07fd1464c415', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:22:45,292:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139885990783056,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5pTa3PLqlmbXiCfR0PFw";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-139885990858960">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-139885990862224">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139885990862416">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-139885990860752">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139885990859536">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-139885990860816">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-139885990859600">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-139885990862160">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139885990859152">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-139885990859472">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-139885990858832">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">127</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line before"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line before"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line before"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line before"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line current"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def startrec(panelinfo,cardinfo):</pre>
<pre class="line after"><span class="ws">        </span>#print('#############data,cardinfo ###########: ',panelinfo,cardinfo)</pre></div>
</div>

<li><div class="frame" id="frame-139885990859216">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.get ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws">        </span>json_objects=json.loads ( str ( rs.text ) )</pre>
<pre class="line after"><span class="ws">        </span>#print ( str ( method ) + '  &lt;  Response   &gt;  ' + str ( params ) )</pre>
<pre class="line after"><span class="ws">        </span>#print(json_objects)</pre>
<pre class="line after"><span class="ws">        </span>if method == 'RecordUpdater.insert':</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139885990859664">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">75</em>,
      in <code class="function">get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('get', url, params=params, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def options(url, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends an OPTIONS request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139885990860048">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139885990860112">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-139885990859920">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139885990859408">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 127, in addcardoldpanel
    sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 75, in get
    return request('get', url, params=params, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 127, in addcardoldpanel
    sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { "record" :card }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 75, in get
    return request('get', url, params=params, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:22:45,292:ERROR:test exception: set_cards FAILED
2021-08-25 16:22:45,293:ERROR:FAILED
2021-08-25 16:22:45,294:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:22:45,294:ERROR:status: 500
2021-08-25 16:22:45,294:ERROR:sent params: {'sid': 'd87c541d-d5c9-40a3-a52f-07fd1464c415', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:22:45,294:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139885990783632,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "5pTa3PLqlmbXiCfR0PFw";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-139886099529104">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-139886079991696">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139886088809168">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-139885990860432">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139885990860368">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-139885990861072">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-139885990860496">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-139885990859024">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139885990862672">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )<
2021-08-25 16:29:02,948:DEBUG:Using selector: EpollSelector
2021-08-25 16:29:02,956:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:29:03,236:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "4132835b-d788-4a93-ac80-2ec95e322aa9", 
  "success": 1
}

2021-08-25 16:29:03,236:INFO:POST 'get_devices' data = ({'sid': '4132835b-d788-4a93-ac80-2ec95e322aa9'})
2021-08-25 16:29:03,765:INFO:response for 'get_devices' data = ({'sid': '4132835b-d788-4a93-ac80-2ec95e322aa9'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:29:03,766:INFO:POST 'set_cards' data = ({'sid': '4132835b-d788-4a93-ac80-2ec95e322aa9', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:29:03,767:INFO:POST 'set_cards' data = ({'sid': '4132835b-d788-4a93-ac80-2ec95e322aa9', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:29:03,767:INFO:POST 'set_cards' data = ({'sid': '4132835b-d788-4a93-ac80-2ec95e322aa9', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:29:04,510:ERROR:FAILED
2021-08-25 16:29:04,511:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:29:04,511:ERROR:status: 500
2021-08-25 16:29:04,511:ERROR:sent params: {'sid': '4132835b-d788-4a93-ac80-2ec95e322aa9', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:29:04,511:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139947871062800,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "TV0BPsGCkH6wCMXZmVz2";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-139947862380624">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-139947862302608">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139947862299408">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-139947862298704">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139947862301392">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-139947862298896">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-139947862301584">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-139947862301520">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139947862298832">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-139947862301904">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-139947862302672">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">123</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>obj = json_objects.get('result')</pre>
<pre class="line before"><span class="ws">        </span>print(&quot;OBJECT ADDCARDS : &quot;,obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line current"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line after"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre></div>
</div>

<li><div class="frame" id="frame-139947862300048">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.post ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws">        </span>json_objects=json.loads ( str ( rs.text ) )</pre>
<pre class="line after"><span class="ws">        </span>#print ( str ( method ) + '  &lt;  Response   &gt;  ' + str ( params ) )</pre>
<pre class="line after"><span class="ws">        </span>#print(json_objects)</pre>
<pre class="line after"><span class="ws">        </span>if method == 'RecordUpdater.insert':</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947862302288">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">117</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('post', url, data=data, json=json, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def put(url, data=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a PUT request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947862302160">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947862299152">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-139947862301328">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947870901968">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 123, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 123, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { "name" :"AccessControlCard" }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:29:04,512:ERROR:test exception: set_cards FAILED
2021-08-25 16:29:37,540:DEBUG:Using selector: EpollSelector
2021-08-25 16:29:37,547:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:29:37,791:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7", 
  "success": 1
}

2021-08-25 16:29:37,791:INFO:POST 'get_devices' data = ({'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7'})
2021-08-25 16:29:38,166:INFO:response for 'get_devices' data = ({'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:29:38,167:INFO:POST 'set_cards' data = ({'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:29:38,168:INFO:POST 'set_cards' data = ({'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:29:38,168:INFO:POST 'set_cards' data = ({'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:29:38,881:INFO:response for 'set_cards' data = ({'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:29:38,959:INFO:response for 'set_cards' data = ({'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:29:39,009:ERROR:FAILED
2021-08-25 16:29:39,009:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:29:39,010:ERROR:status: 500
2021-08-25 16:29:39,010:ERROR:sent params: {'sid': 'c1b3ab69-d9d0-4ea6-a7a6-a8825c144ea7', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:29:39,010:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139947862238800,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "TV0BPsGCkH6wCMXZmVz2";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-139947862238672">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-139947862241104">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139947840796816">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-139947840797648">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139947840797328">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-139947840797072">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-139947840798672">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-139947840798032">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139947840798160">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-139947840797392">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">140</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-139947840796624">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">123</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>obj = json_objects.get('result')</pre>
<pre class="line before"><span class="ws">        </span>print(&quot;OBJECT ADDCARDS : &quot;,obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line current"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line after"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre></div>
</div>

<li><div class="frame" id="frame-139947840796944">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.post ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws">        </span>json_objects=json.loads ( str ( rs.text ) )</pre>
<pre class="line after"><span class="ws">        </span>#print ( str ( method ) + '  &lt;  Response   &gt;  ' + str ( params ) )</pre>
<pre class="line after"><span class="ws">        </span>#print(json_objects)</pre>
<pre class="line after"><span class="ws">        </span>if method == 'RecordUpdater.insert':</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947840797776">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">117</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('post', url, data=data, json=json, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def put(url, data=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a PUT request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947840797264">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947840797904">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-139947840798224">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139947840797200">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 123, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 140, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 123, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { "name" :"AccessControlCard" }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:29:39,035:ERROR:test exception: set_cards FAILED
2021-08-25 16:31:38,225:DEBUG:Using selector: EpollSelector
2021-08-25 16:31:38,232:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:31:38,454:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "fb679282-4cee-405d-b1f3-88924b147a2f", 
  "success": 1
}

2021-08-25 16:31:38,454:INFO:POST 'get_devices' data = ({'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f'})
2021-08-25 16:31:38,835:INFO:response for 'get_devices' data = ({'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:31:38,836:INFO:POST 'set_cards' data = ({'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:31:38,837:INFO:POST 'set_cards' data = ({'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:31:38,837:INFO:POST 'set_cards' data = ({'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:31:39,558:INFO:response for 'set_cards' data = ({'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:31:39,648:ERROR:FAILED
2021-08-25 16:31:39,649:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:31:39,649:ERROR:status: 500
2021-08-25 16:31:39,649:ERROR:sent params: {'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:31:39,649:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140115432310224,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MnEBE9bf2gBeZuy58kO3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140115415091856">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-140115415093200">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140115415093008">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-140115415093136">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140115415207632">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-140115415204048">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-140115415206416">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-140115415207120">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140115415206544">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-140115415205072">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-140115415204688">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">130</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>obj = json_objects.get('result')</pre>
<pre class="line before"><span class="ws">        </span>print(&quot;OBJECT ADDCARDS : &quot;,obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line current"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line after"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre></div>
</div>

<li><div class="frame" id="frame-140115415206736">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.post ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;B&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(rs)</pre></div>
</div>

<li><div class="frame" id="frame-140115415206800">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">117</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('post', url, data=data, json=json, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def put(url, data=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a PUT request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115415204816">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115415206352">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-140115415205520">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115415205200">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 130, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 130, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { "name" :"AccessControlCard" }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:31:39,650:ERROR:FAILED
2021-08-25 16:31:39,650:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:31:39,651:ERROR:status: 500
2021-08-25 16:31:39,651:ERROR:sent params: {'sid': 'fb679282-4cee-405d-b1f3-88924b147a2f', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:31:39,651:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>TypeError: 'NoneType' object is not iterable // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140115432311312,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MnEBE9bf2gBeZuy58kO3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: 'NoneType' object is not iterable</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140115415158224">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-140115415158480">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140115415158160">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-140115415158608">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140115432151248">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-140115432151120">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-140115432150800">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-140115432150992">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140115432151376">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">408</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                </span>failed_info={ 'error_code' :33, 'description' :'This Card is added ',</pre>
<pre class="line before"><span class="ws">                                              </span>&quot;cards_ids&quot; :failed_cards }</pre>
<pre class="line before"><span class="ws">                                </span>#failed.append ( failed_info )</pre>
<pre class="line before"><span class="ws">                        </span>updaterec=loginupdate(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">                        </span>for card_id in written_cards:</pre>
<pre class="line current"><span class="ws">                                </span>for rec_card in updaterec:</pre>
<pre class="line after"><span class="ws">                                        </span>card_id_up=rec_card[ 'CardNo' ]</pre>
<pre class="line after"><span class="ws">                                        </span>rec_no=rec_card[ 'RecNo' ]</pre>
<pre class="line after"><span class="ws">                                        </span>person_name = rec_card['UserID']</pre>
<pre class="line after"><span class="ws">                                        </span>if card_id_up == card_id:</pre>
<pre class="line after"><span class="ws">                                                </span>print(&quot;card_id : &quot;,card_id)</pre></div>
</div>
</ul>
  <blockquote>TypeError: 'NoneType' object is not iterable</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 408, in addcards
    for rec_card in updaterec:
TypeError: 'NoneType' object is not iterable</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 408, in addcards
    for rec_card in updaterec:
TypeError: 'NoneType' object is not iterable

-->

2021-08-25 16:31:39,652:ERROR:test exception: set_cards FAILED
2021-08-25 16:32:10,542:DEBUG:Using selector: EpollSelector
2021-08-25 16:32:10,549:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:32:10,881:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "2a95affa-e2cc-454f-aca2-5a57c0171f95", 
  "success": 1
}

2021-08-25 16:32:10,881:INFO:POST 'get_devices' data = ({'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95'})
2021-08-25 16:32:11,216:INFO:response for 'get_devices' data = ({'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:32:11,216:INFO:POST 'set_cards' data = ({'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:32:11,217:INFO:POST 'set_cards' data = ({'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:32:11,218:INFO:POST 'set_cards' data = ({'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:32:11,813:INFO:response for 'set_cards' data = ({'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:32:11,903:INFO:response for 'set_cards' data = ({'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:32:12,038:ERROR:FAILED
2021-08-25 16:32:12,039:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:32:12,039:ERROR:status: 500
2021-08-25 16:32:12,039:ERROR:sent params: {'sid': '2a95affa-e2cc-454f-aca2-5a57c0171f95', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:32:12,040:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140115187433040,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MnEBE9bf2gBeZuy58kO3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140115187430544">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-140115187431504">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140115187429776">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-140115187429712">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140115187429456">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-140115432311568">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-140115432312784">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-140115432312720">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140115415204368">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-140115415206864">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-140115415206608">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">130</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>obj = json_objects.get('result')</pre>
<pre class="line before"><span class="ws">        </span>print(&quot;OBJECT ADDCARDS : &quot;,obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line current"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line after"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre></div>
</div>

<li><div class="frame" id="frame-140115415204240">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.post ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;B&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(rs)</pre></div>
</div>

<li><div class="frame" id="frame-140115187480592">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">117</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('post', url, data=data, json=json, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def put(url, data=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a PUT request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115187479888">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115187480528">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-140115187482384">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115187482512">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 130, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 130, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { "name" :"AccessControlCard" }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:32:12,040:ERROR:test exception: set_cards FAILED
2021-08-25 16:32:16,160:DEBUG:Using selector: EpollSelector
2021-08-25 16:32:16,167:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:32:16,454:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "7c60b0f3-aae6-4d65-8dd2-5809ace2ed52", 
  "success": 1
}

2021-08-25 16:32:16,455:INFO:POST 'get_devices' data = ({'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52'})
2021-08-25 16:32:16,803:INFO:response for 'get_devices' data = ({'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:32:16,804:INFO:POST 'set_cards' data = ({'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:32:16,804:INFO:POST 'set_cards' data = ({'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:32:16,805:INFO:POST 'set_cards' data = ({'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:32:17,557:INFO:response for 'set_cards' data = ({'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:32:17,578:INFO:response for 'set_cards' data = ({'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}): {"failed_cards": [], "success": 1, "written_cards": ["7E57C0DE"]}
2021-08-25 16:32:17,667:ERROR:FAILED
2021-08-25 16:32:17,667:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:32:17,667:ERROR:status: 500
2021-08-25 16:32:17,667:ERROR:sent params: {'sid': '7c60b0f3-aae6-4d65-8dd2-5809ace2ed52', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:32:17,668:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140115182869840,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MnEBE9bf2gBeZuy58kO3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140115183246416">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-140115183246480">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140115183247056">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-140115183246864">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140115183246928">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-140115183246736">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-140115182526736">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-140115182526800">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140115182526864">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-140115182526672">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-140115182526608">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">130</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>obj = json_objects.get('result')</pre>
<pre class="line before"><span class="ws">        </span>print(&quot;OBJECT ADDCARDS : &quot;,obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line current"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line after"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre></div>
</div>

<li><div class="frame" id="frame-140115182526928">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.post ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;B&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(rs)</pre></div>
</div>

<li><div class="frame" id="frame-140115182526992">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">117</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('post', url, data=data, json=json, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def put(url, data=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a PUT request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115182527056">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115182527120">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-140115182527248">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115182527312">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 130, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 130, in addcardoldpanel
    sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { "name" :"AccessControlCard" }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:32:17,668:ERROR:test exception: set_cards FAILED
2021-08-25 16:33:21,937:DEBUG:Using selector: EpollSelector
2021-08-25 16:33:21,944:INFO:POST 'authorize' data = ({'login': 'admin', 'password': 'admin123'})
2021-08-25 16:33:22,320:INFO:response for 'authorize' data = ({'login': 'admin', 'password': 'admin123'}): {
  "sid": "f3a08dc5-91f6-4ce4-9a6e-d68476254607", 
  "success": 1
}

2021-08-25 16:33:22,321:INFO:POST 'get_devices' data = ({'sid': 'f3a08dc5-91f6-4ce4-9a6e-d68476254607'})
2021-08-25 16:33:22,731:INFO:response for 'get_devices' data = ({'sid': 'f3a08dc5-91f6-4ce4-9a6e-d68476254607'}): {
  "devices": [
    {
      "device_id": "5L07156PAZF74D9", 
      "device_name": "8001", 
      "device_online": 1
    }, 
    {
      "device_id": "5F02256PAZDF4B3", 
      "device_name": "123", 
      "device_online": 1
    }, 
    {
      "device_id": "5F07922PAZB3549", 
      "device_name": "6198", 
      "device_online": 1
    }
  ], 
  "success": 1
}

2021-08-25 16:33:22,732:INFO:POST 'set_cards' data = ({'sid': 'f3a08dc5-91f6-4ce4-9a6e-d68476254607', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:33:22,732:INFO:POST 'set_cards' data = ({'sid': 'f3a08dc5-91f6-4ce4-9a6e-d68476254607', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:33:22,733:INFO:POST 'set_cards' data = ({'sid': 'f3a08dc5-91f6-4ce4-9a6e-d68476254607', 'device_id': '5F07922PAZB3549', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]})
2021-08-25 16:33:23,468:ERROR:FAILED
2021-08-25 16:33:23,469:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:33:23,469:ERROR:status: 500
2021-08-25 16:33:23,469:ERROR:sent params: {'sid': 'f3a08dc5-91f6-4ce4-9a6e-d68476254607', 'device_id': '5F02256PAZDF4B3', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:33:23,469:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140115177726992,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MnEBE9bf2gBeZuy58kO3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140115177787920">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-140115177791056">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140115177791248">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-140115177787856">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140115177787600">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-140115177787536">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-140115177787792">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-140115177791312">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140115177788176">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-140115177790928">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-140115177790992">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">134</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line before"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line before"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line before"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :userid,</pre>
<pre class="line before"><span class="ws">               </span>&quot;VTOPosition&quot; :&quot;&quot;, &quot;ValidDateStart&quot; :&quot;&quot;,&quot;ValidDateEnd&quot; :&quot;&quot; }</pre>
<pre class="line current"><span class="ws">        </span>sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span>print(&quot;SENDDAATTA : &quot;,sendData)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def startrec(panelinfo,cardinfo):</pre>
<pre class="line after"><span class="ws">        </span>#print('#############data,cardinfo ###########: ',panelinfo,cardinfo)</pre></div>
</div>

<li><div class="frame" id="frame-140115177788432">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">sendreq</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>rpcs='/RPC2'</pre>
<pre class="line before"><span class="ws">        </span>urls='http://' + ip + rpcs</pre>
<pre class="line before"><span class="ws">        </span>rs=requests.post ( urls, data = data_jsons, headers = {</pre>
<pre class="line before"><span class="ws">                </span>&quot;Content-Type&quot; :&quot;application/x-www-form-urlencoded&quot;,</pre>
<pre class="line current"><span class="ws">                </span>&quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;B&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>print(rs)</pre></div>
</div>

<li><div class="frame" id="frame-140115177787664">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">117</em>,
      in <code class="function">post</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('post', url, data=data, json=json, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def put(url, data=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a PUT request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115177788816">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115177788496">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-140115177873616">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-140115177873680">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/requests/adapters.py"</cite>,
      line <em class="line">498</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span># Then, reraise so that we can handle the actual exception.</pre>
<pre class="line before"><span class="ws">                    </span>low_conn.close()</pre>
<pre class="line before"><span class="ws">                    </span>raise</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except (ProtocolError, socket.error) as err:</pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(err, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except MaxRetryError as e:</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(e.reason, ConnectTimeoutError):</pre>
<pre class="line after"><span class="ws">                </span># TODO: Remove this in 3.0.0: see #2811</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(e.reason, NewConnectionError):</pre></div>
</div>
</ul>
  <blockquote>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/usr/local/lib/python2.7/dist-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/var/www/max2d/rest-server/rest-api-server.py&quot;, line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 134, in addcardoldpanel
    sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { &quot;record&quot; :card }, ip = ip )
  File &quot;/var/www/max2d/rest-server/addcardsrpc.py&quot;, line 99, in sendreq
    &quot;Cookie&quot; :&quot;DhWebClientSessionID=&quot; + str (lastsession ) } )
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python2.7/dist-packages/requests/adapters.py&quot;, line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python2.7/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/var/www/max2d/rest-server/rest-api-server.py", line 379, in addcards
    rec=startrec ( panelinfo, cardinfo )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 147, in startrec
    sendData = addcardoldpanel(cardnum,userid,name)
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 134, in addcardoldpanel
    sendData = sendreq ( method = 'RecordUpdater.insert',object=None, params = { "record" :card }, ip = ip )
  File "/var/www/max2d/rest-server/addcardsrpc.py", line 99, in sendreq
    "Cookie" :"DhWebClientSessionID=" + str (lastsession ) } )
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 117, in post
    return request('post', url, data=data, json=json, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/requests/adapters.py", line 498, in send
    raise ConnectionError(err, request=request)
ConnectionError: ('Connection aborted.', BadStatusLine("''",))

-->

2021-08-25 16:33:23,470:ERROR:test exception: set_cards FAILED
2021-08-25 16:33:23,471:ERROR:FAILED
2021-08-25 16:33:23,471:ERROR:url: http://195.182.143.57:5002/set_cards
2021-08-25 16:33:23,471:ERROR:status: 500
2021-08-25 16:33:23,472:ERROR:sent params: {'sid': 'f3a08dc5-91f6-4ce4-9a6e-d68476254607', 'device_id': '5L07156PAZF74D9', 'cards': [{'card_id': '7E57C0DE', 'person_name': 'Test Person'}]}
2021-08-25 16:33:23,472:ERROR:result: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,)) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 140115177728400,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "MnEBE9bf2gBeZuy58kO3";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">ConnectionError: ('Connection aborted.', BadStatusLine(&quot;''&quot;,))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-140115177791184">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-140115177787728">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-140115177789008">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-140115432309840">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-140115177788048">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-140115177788752">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-140115177788880">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-140115187430032">
  <h4>File <cite class="filename">"/usr/local/lib/python2.7/dist-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-140115183246544">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/rest-api-server.py"</cite>,
      line <em class="line">379</em>,
      in <code class="function">addcards</code></h4>
  <div class="source "><pre class="line before"><span class="ws">                                        </span>print ( '-=-=-=-=-=', card_id )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'Working in progress' )</pre>
<pre class="line before"><span class="ws">                                        </span>print ( 'PANEL INFO ', panelinfo )</pre>
<pre class="line before"><span class="ws">                                        </span>cardinfo=card_id, person_name</pre>
<pre class="line before"><span class="ws">                                        </span>ip=panelinfo[ 'ip' ]</pre>
<pre class="line current"><span class="ws">                                        </span>rec=startrec ( panelinfo, cardinfo )</pre>
<pre class="line after"><span class="ws">                                        </span>print ( ip + &quot;------------&quot;, rec )</pre>
<pre class="line after"><span class="ws">                                        </span>status={ 'panel_id' :panels_id, 'status' :rec }</pre>
<pre class="line after"><span class="ws">                                        </span>status=json.dumps ( status )</pre>
<pre class="line after"><span class="ws">                                        </span># info.append(status)</pre>
<pre class="line after"><span class="ws">                                        </span>if rec==&quot;Duplicate record&quot; :</pre></div>
</div>

<li><div class="frame" id="frame-140115183246672">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">147</em>,
      in <code class="function">startrec</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>ip2=panelinfo['ip']</pre>
<pre class="line before"><span class="ws">        </span>login(username=username,password=password,ip2=ip2)</pre>
<pre class="line before"><span class="ws">        </span>cardnum = cardinfo[0]</pre>
<pre class="line before"><span class="ws">        </span>userid = cardinfo[1]</pre>
<pre class="line before"><span class="ws">        </span>name = cardinfo[1]</pre>
<pre class="line current"><span class="ws">        </span>sendData = addcardoldpanel(cardnum,userid,name)</pre>
<pre class="line after"><span class="ws">        </span>return sendData</pre></div>
</div>

<li><div class="frame" id="frame-140115177873744">
  <h4>File <cite class="filename">"/var/www/max2d/rest-server/addcardsrpc.py"</cite>,
      line <em class="line">130</em>,
      in <code class="function">addcardoldpanel</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>obj = json_objects.get('result')</pre>
<pre class="line before"><span class="ws">        </span>print(&quot;OBJECT ADDCARDS : &quot;,obj)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def addcardoldpanel ( cardnum, userid, name ) :</pre>
<pre class="line current"><span class="ws">        </span>sendreq ( method = 'RecordUpdater.factory.instance',object=None, params = { &quot;name&quot; :&quot;AccessControlCard&quot; }, ip = ip )</pre>
<pre class="line after"><span class="ws">        </span># card={ &quot;CardName&quot; :&quot;VIP&quot;, &quot;CardNo&quot; :str(cardnum), &quot;CardStatus&quot; :0, &quot;CardType&quot; :1, &quot;UserID&quot; :str(userid),&quot;UserName&quot;:name,&quot;VTOPosition&quot; :&quot;&quot; }</pre>
<pre class="line after"><span class="ws">        </span>card={ &quot;CardName&quot; :str(name), &quot;CardNo&quot; :str( cardnum ), &quot;CardStatus&
